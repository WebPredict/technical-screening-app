category = Category.find_by(name: "Algorithms")
if category == nil
  category = Category.create!(name: "Algorithms")
end
question2 = Question.create!(content: "What is the time complexity of quicksort? ", answer: "O(NlogN).", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question3 = Question.create!(content: "What's the time and space complexity of mergesort? ", answer: "O(N^2).", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question4 = Question.create!(content: "What is the best time complexity for a comparison sort? ", answer: "O(NlogN).", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question5 = Question.create!(content: "What is radix sort?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question6 = Question.create!(content: "How would you traverse a tree level by level?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question7 = Question.create!(content: "What is the height of a balanced binary tree, as a function of the number of nodes in the tree?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question8 = Question.create!(content: "How would you go about multiplying two matrices, and what would be the time complexity?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question9 = Question.create!(content: "How would you determine if a linked list has a loop?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question10 = Question.create!(content: "What is the difference between a recursive and iterative version of a function?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question11 = Question.create!(content: "What does it mean for a computing problem to be NP complete?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question12 = Question.create!(content: "What is an example of an exponential time algorithm?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question13 = Question.create!(content: "What is an example of a linear time algorithm?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Groovy / Grails")
if category == nil
  category = Category.create!(name: "Groovy / Grails")
end
question14 = Question.create!(content: "What are some benefits of Groovy over Java?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question15 = Question.create!(content: "How would you create a hash in Groovy? How would you use it?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question16 = Question.create!(content: "How would you write a simple groovy script to load a file, change any line that matches a certain pattern, and save the file?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question17 = Question.create!(content: "What kind of support does Groovy have for JSON?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question18 = Question.create!(content: "What kind of support does Groovy have for XML?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "C#")
if category == nil
  category = Category.create!(name: "C#")
end
question19 = Question.create!(content: "How would you write a simple for loop on a collection in C#?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question20 = Question.create!(content: "What are some basic data types in C#?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question21 = Question.create!(content: "What are some differences with C# and Java?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question22 = Question.create!(content: "How would you declare an array in C#?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question23 = Question.create!(content: "What are some common C# libraries?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question24 = Question.create!(content: "What would you use the virtual keyword for in C#?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question25 = Question.create!(content: "What is the latest version of C# and the .Net Framework?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question26 = Question.create!(content: "How would you characterize the typing of C#?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question27 = Question.create!(content: "Do you need to write explicit getter/setter methods in C# for property access?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question28 = Question.create!(content: "What does the delegate keyword enable?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question29 = Question.create!(content: "Does C# support checked exceptions?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question30 = Question.create!(content: "What is the purpose of having an unsafe code block in C#?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Ruby / Rails")
if category == nil
  category = Category.create!(name: "Ruby / Rails")
end
question31 = Question.create!(content: "What are the origins of Ruby / Rails? ", answer: "Ruby created 20 years ago.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question32 = Question.create!(content: "How would you characterize the typing in Ruby? ", answer: "Dynamic / duck typing.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question33 = Question.create!(content: "How would you characterize the Ruby language? ", answer: "Object-oriented with inheritence, mixins and metaclasses.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question34 = Question.create!(content: "Everything is an expression and is executed imperatively", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question35 = Question.create!(content: "How does Ruby syntax compare with that of other languages? ", answer: "Succinct, flexible, minimalist syntax.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question36 = Question.create!(content: "How would you create an array in Ruby?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question37 = Question.create!(content: "How would you create a hash in Ruby? ", answer: "hash = Hash.new or {} hash = { :foo => 'bar', :another => 'something' } puts hash[:another].", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question38 = Question.create!(content: "What is a symbol in Ruby?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question39 = Question.create!(content: "How would you create a regular expression in Ruby?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question40 = Question.create!(content: "How would you specify default function arguments in Ruby?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question41 = Question.create!(content: "How does garbage collection work in Ruby?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question42 = Question.create!(content: "What site is the centralized package management for Ruby done? ", answer: "RubyGems.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question43 = Question.create!(content: "What is the Interactive Ruby Shell (REPL)?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question44 = Question.create!(content: "Does Ruby support operator overloading? Give an example.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question45 = Question.create!(content: "built-in support for rational and complex numbers", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question46 = Question.create!(content: "How does Ruby support exception handling?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question47 = Question.create!(content: "every value is an object including null", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question48 = Question.create!(content: "How do you enable access to an instance variable in Ruby? ", answer: "instance variables are private and accessed with attr_writer/reader unlike using getter/setter methods in other languages.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question49 = Question.create!(content: "What are classes and modules in Ruby?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question50 = Question.create!(content: "What are $ and @ in Ruby? ", answer: "$ and @ are scope resolution operators.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question51 = Question.create!(content: "What is the interactive command line interpreter (IRB)?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question52 = Question.create!(content: "How would you write a \"Hello World\" program in Ruby? ", answer: "puts \"Hello World\".", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question53 = Question.create!(content: "What would the following do to a Ruby array: a.flatten.uniq?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question54 = Question.create!(content: "What is the purpose of Proc.new? ", answer: "for anonymous functions.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question55 = Question.create!(content: "Does Ruby support metaprogramming, and if so, what is that? ", answer: "Yes, it's modifying at runtime class + method definitions.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question56 = Question.create!(content: "What are JRuby and Rubinius? ", answer: "JRuby is the java implementation, Rubinius is the C++ implementation.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question57 = Question.create!(content: "What is a gem? A ruby package is called a gem, and there are 70K+ on RubyGems.org", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question58 = Question.create!(content: "What is ActiveRecord?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question59 = Question.create!(content: "What is the Gemfile for?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question60 = Question.create!(content: "How would you generate a rails migration script?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question61 = Question.create!(content: "What is rake used for?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question62 = Question.create!(content: "What is Heroku?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "PL/SQL")
if category == nil
  category = Category.create!(name: "PL/SQL")
end
question63 = Question.create!(content: "How does a PL/SQL function declaration look like?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question64 = Question.create!(content: "How would you write a loop in PL/SQL using a cursor?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "DB Performance")
if category == nil
  category = Category.create!(name: "DB Performance")
end
question65 = Question.create!(content: "What are some basic things to check for when analyzing database performance? ", answer: "Indexes, query plans, memory usage, # of connections.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question66 = Question.create!(content: "Why would you use an index in a DB and what are some different types?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question67 = Question.create!(content: "What is sharding?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question68 = Question.create!(content: "What is DB partitioning?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question69 = Question.create!(content: "How would you go about examining a query plan and decide what to do with the plan details?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question70 = Question.create!(content: "Why would you specify a hint to query execution, and how would you go about that?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question71 = Question.create!(content: "What are some different types of transactions and their implications?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question72 = Question.create!(content: "How might choice of column data type affect performance?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Web Application Performance")
if category == nil
  category = Category.create!(name: "Web Application Performance")
end
question73 = Question.create!(content: "What are some of the first things you'd look into for a poorly performing 3 tier web application?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question74 = Question.create!(content: "What are some issues requiring consideration when implementing a caching strategy in a web application?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "OOP")
if category == nil
  category = Category.create!(name: "OOP")
end
question75 = Question.create!(content: "What is encapsulation?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question76 = Question.create!(content: "What is polymorphism?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question77 = Question.create!(content: "What is information hiding?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question78 = Question.create!(content: "What is inheritance useful?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question79 = Question.create!(content: "Why would you use / create an interface, as opposed to a class?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Design patterns")
if category == nil
  category = Category.create!(name: "Design patterns")
end
question80 = Question.create!(content: "What is UML?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question81 = Question.create!(content: "Name some design patterns.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question82 = Question.create!(content: "Describe a scenario where you'd use a singleton.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question83 = Question.create!(content: "Describe a scenario where you'd use a factory.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Agile/Scrum, Waterfall, Kanban")
if category == nil
  category = Category.create!(name: "Agile/Scrum, Waterfall, Kanban")
end
question84 = Question.create!(content: "What is a sprint?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question85 = Question.create!(content: "What's the difference between Agile and Scrum?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question86 = Question.create!(content: "What is iterative development?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question87 = Question.create!(content: "What are the actors involved in Agile? Stake holders, developers", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question88 = Question.create!(content: "What is the Waterfall development approach?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question89 = Question.create!(content: "What are the differences between Kanban and Agile?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question90 = Question.create!(content: "Backbone.js", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question91 = Question.create!(content: "What design paradigm is Backbone.js based on? ", answer: "MVP (Model-view-presenter).", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question92 = Question.create!(content: "What dependency does Backbone.js have? ", answer: "Underscore.js.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question93 = Question.create!(content: "What is a SPA, and how does it relate to Backbone.js?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "AngularJS")
if category == nil
  category = Category.create!(name: "AngularJS")
end
question94 = Question.create!(content: "AngularJS is a JavaScript library. It is made to be more responsive to user actions with the benefit of being extended from HTLM DOM additional attributes. It is an open source, free and used vastly across the globe. It is licensed under Apache version 2.0.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question95 = Question.create!(content: "	The latest release of AngularJS was introduced on 17th Mar 2015 which is release 1.3.15 it is the current stable version", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question96 = Question.create!(content: "	AngularJS implements MVC pattern to separate presentation, data, and logic components.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question97 = Question.create!(content: "	From a developer's perspective AngularJS allows directives to be used which brings out additional functionality on top of HTML", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question98 = Question.create!(content: "	Reducing the JavaScript for having filters not just on the page but also for custom HTML table.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question99 = Question.create!(content: "	Avoid writing MVC pipeline, views are defined using HTML and directives take care of the data binding so essentially AngularJS reduces coding for a developer", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question100 = Question.create!(content: "	AngularJS is a google product along with a handful of community developers", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question101 = Question.create!(content: "	AngularJS is not in favor of DOM manipulation so that a project improves the goal of testing and performance", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question102 = Question.create!(content: "	Dependency injection feature of AngularJS brings out the coordination between server side and client side web applications very efficiently.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question103 = Question.create!(content: "	The most important feature of AngularJS is considered to be data binding.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question104 = Question.create!(content: "	In July 2012, AngularJS team built a plugin for google chrome browser that improves the debugging of web applications.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question105 = Question.create!(content: "	AngularJS Enables Massively Parallel Development", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question106 = Question.create!(content: "	AngularJS uses controller function prepared in JavaScript which is used as argument the Angular scope. Controllers are attached to the DOM through the directives", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question107 = Question.create!(content: "	Scopes in AngularJS is referring to the application model. Expressions are executed in scope. Scopes are used for watching expressions and evaluate events", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question108 = Question.create!(content: "	AngularJS as a framework is far more efficient and reliable than JQuery as it supports REST functionality, server side scripting, data modeling and etc.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question109 = Question.create!(content: "	Sometimes going through release changes could be painful in AngularJS as the base architecture gets changed and it impacts the code.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question110 = Question.create!(content: "	The functionality of no editing the templates as string and templates being just an HTML doc makes AngularJS a most used framework", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question111 = Question.create!(content: "	The MVC model is one other reason AngularJS being famous and known around the world", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question112 = Question.create!(content: "	AngularJS comes with a strong testing in-built which reduces a lot of unit/UAT for the project to deliver", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question113 = Question.create!(content: "	AngularJS is very easy to learn language from a developer perspective if you are known to web technologies like JavaScript, CSS, HTML and etc.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Ember")
if category == nil
  category = Category.create!(name: "Ember")
end
question114 = Question.create!(content: "What is Ember Data?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question115 = Question.create!(content: "What is the Ember Inspector?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question116 = Question.create!(content: "What kind of data binding does Ember support?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question117 = Question.create!(content: "What is Handlebars.js and how does Ember use it?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "ExtJS")
if category == nil
  category = Category.create!(name: "ExtJS")
end
question118 = Question.create!(content: "What is Sencha?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "OrientDB")
if category == nil
  category = Category.create!(name: "OrientDB")
end
question119 = Question.create!(content: "OrientDB is an open source NoSQL (not only SQL) DBMS written in Java and designed to be exceptionally fast: it can store up to 220,000 records per second on common hardware. It is a document-based database, but the relationships are managed as in graph databases with direct connections between records. It supports schema-less, schema-full and schema-mixed modes and it has a strong security profiling system based on users and roles. It has a strong security profiling system based on users and roles and supports SQL as a query language. OrientDB uses a new indexing algorithm called MVRB-Tree, derived from the red'black tree and from the B+ tree; this reportedly has benefits of having both fast insertions and fast lookups.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question120 = Question.create!(content: "OrientDB is free for any use including commercial with its Apache 2 Open Source License.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question121 = Question.create!(content: "OrientDB is the first Multi-Model Open Source NoSQL DBMS that brings together the power of graphs and the flexibility of documents into one scalable, high-performance operational database.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question122 = Question.create!(content: "OrientDB query language is straightforward and easy to use, especially for those skilled in the relational DBMS world.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question123 = Question.create!(content: "OrientDB can it embed documents like any other Document database, but it manages relationships like Graph Databases with direct connections among records. You can traverse parts of or entire trees and graphs of records in a few milliseconds.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question124 = Question.create!(content: "OrientDB supports natively HTTP, RESTful protocol and JSON without use 3rd party libraries and components.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question125 = Question.create!(content: "Orient Technologies, the company behind OrientDB, offers optional Professional Services such as Developer and Production Support, Training and Consultancy with", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question126 = Question.create!(content: "transparent and competitive pricing. These options are available to ensure you're maximizing OrientDB's capabilities for your particular needs and use case.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question127 = Question.create!(content: "OrientDB is available in Community Edition (this edition is released as an open source project under the Apache 2 license)and Enterprise Edition (this edition is commercial software built on top of the Community Edition).", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "MongoDB")
if category == nil
  category = Category.create!(name: "MongoDB")
end
question128 = Question.create!(content: "Most popular NoSQL database", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question129 = Question.create!(content: "document DB, no column definition required", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question130 = Question.create!(content: "supports search by field, range queries, regular expression searches", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question131 = Question.create!(content: "Built-in sharding, for horizontal scaling", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question132 = Question.create!(content: "Queries are JavaScript expressions", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question133 = Question.create!(content: "Limited to 2.5 gig on 32 bit systems", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question134 = Question.create!(content: "Geospatial indexing", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question135 = Question.create!(content: "Data center aware", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question136 = Question.create!(content: "Master/slave replication", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question137 = Question.create!(content: "Uses memory mapped files for storage", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question138 = Question.create!(content: "Useful for: dynamic queries on big DB, with frequently changing data", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question139 = Question.create!(content: "Supports capped collections (behave like a circular queue once cap has been reached)", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question140 = Question.create!(content: "mongo is the shell, mongostat for statistics on DB", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question141 = Question.create!(content: "DB port: 28017, web interface is 29017", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question142 = Question.create!(content: "MongoDB is a document-oriented database that was released under the Apache License in 2009. The database is open-source and free. It is used as a backend software by Craigslist, eBay, Foursquare, and the New York Times. MongoDB is the most popular NoAQL database system.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question143 = Question.create!(content: " MongoDB is a document-oriented database; instead of breaking a structure up into multiple relational structures, it stores in the minimal number of documents.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question144 = Question.create!(content: " Which fields in MongoDB are indexable? ", answer: "all of them.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question145 = Question.create!(content: " What are some ways data in MongoDB is searchable? By field, range query, or regular expression.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question146 = Question.create!(content: " MongoDB is highly scalable; it can be deployed to the cloud and accessed from anywhere.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question147 = Question.create!(content: " MongoDB supports native compression, allowing users to reduce their physical storage by 80%.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question148 = Question.create!(content: " What is the Ops Manager? ", answer: "MongoDB Ops Manager can deploy, monitor, back up, and scale the database.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question149 = Question.create!(content: " How can a query plan be reviewed in MongoDB? ", answer: "Query plans can be calculated and reviewed without first running the query using the explain ( ) method.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question150 = Question.create!(content: " Mongo offers geospatial support; an airplane can run queries to see all planes that have crossed multiple hemispheres in a given time frame.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question151 = Question.create!(content: " MongoDB is based on an interactive shell called mongo, which lets developers update, view, insert and remove data.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question152 = Question.create!(content: " Mongotop is a command-line tool that allows the user to track how fast a MongoDB instance reads and writes data.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question153 = Question.create!(content: " Content can be imported and exported through the mongoimport and mongoexport commands.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question154 = Question.create!(content: " MongoDB is the fourth most popular type of database management system.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question155 = Question.create!(content: " MongoDB operates through official drivers in a variety of programming languages, and, because it is open-source, offers several unofficial drivers for other languages.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question156 = Question.create!(content: " MongoDB has received criticism for not supporting collation-based sorting.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question157 = Question.create!(content: " MongoDB can use Javascript server-side in queries, aggregation functions, and exportation.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question158 = Question.create!(content: " MongoDB can be run over multiple servers, duplicating data to keep the system running in case of hardware failure and balancing the load.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question159 = Question.create!(content: " Examples of query documents include db.collection.find(), which retrieves documents from a collection, and db.collection.find({}), which selects all documents in the collection.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question160 = Question.create!(content: " MongoDB supports compound indexes, where a single index structure references multiple fields within documents.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Cassandra")
if category == nil
  category = Category.create!(name: "Cassandra")
end
question161 = Question.create!(content: "What is the main point of Cassandra? ", answer: "Huge datasets use a language similar to SQL.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question162 = Question.create!(content: "What are some limitations in the Cassandra query language? ", answer: "No joins or aggregate functions.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question163 = Question.create!(content: "What are some features of Cassandra? ", answer: "Supports java triggers; can have expiration on data; supports map/reduce with Hadoop; very reliable cross-datacenter replication.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question164 = Question.create!(content: "All nodes similar", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question165 = Question.create!(content: "Distributed counter datatype", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question166 = Question.create!(content: "Apache Cassandra is a NoSQL database designed to handle big data applications. Cassandra is used for mission-critical data. It is extremely decentralized, making it perfect for users and companies who cannot afford to lose access to data, even when a whole data center goes down.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question167 = Question.create!(content: "What are some companies using Cassandra? ", answer: "Cassandra is used at Constant Contact, eBay, Hulu, Instagram, Netflix, Reddit and more.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question168 = Question.create!(content: " Data is fault-tolerant because it is replicated across multiple nodes.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question169 = Question.create!(content: " Every node in a cluster is identical, so applications are decentralized.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question170 = Question.create!(content: " Cassandra is scalable linearly.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question171 = Question.create!(content: " Cassandra is based in log-structured updates but also offers the convenience of column indexes.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question172 = Question.create!(content: " Cassandra offers symmetric, P2P architecture.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question173 = Question.create!(content: " Cassandra also offers integration with Apache Hadoop and other 3rd-party applications.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question174 = Question.create!(content: " In Cassandra, rows are organized into tables with a required primary key.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question175 = Question.create!(content: "All data for a single partition must fit on a single machine in the cluster.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question176 = Question.create!(content: " A single column value may not be larger than 2 gb.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question177 = Question.create!(content: " Cassandra values availability and partitioning tolerance.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question178 = Question.create!(content: " Cassandra can write in quorum write, where it blocks until quorum is reached, or async write, where it sends requests to any node that pushes the data to the appropriate node.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question179 = Question.create!(content: " Once a writer has written, all readers will see that write.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question180 = Question.create!(content: "Cassandra writes first to the CommitLog, and then to a structure called Memtable, or write0back cache of data rows that can be looked up by key.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question181 = Question.create!(content: " Tables may be created, dropped and altered at runtime without interfering with updates or queries.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question182 = Question.create!(content: " Except for batch analysis via Apache Hadoop, Cassandra does not support subqueries.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question183 = Question.create!(content: " Writes and reads offer a tunable level of consistency.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question184 = Question.create!(content: " Cassandra writes and reads in CQL, Cassandra Query Language, an alternative to the RPC interface.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question185 = Question.create!(content: " Cassandra Language drivers are also available for Java, Python, Node.Js, and C++.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question186 = Question.create!(content: " Apple uses over 75,000 Cassandra nodes.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "HBase")
if category == nil
  category = Category.create!(name: "HBase")
end
category = Category.find_by(name: "Accumulo")
if category == nil
  category = Category.create!(name: "Accumulo")
end
question187 = Question.create!(content: "What is Accumulo? ", answer: "Apache Accumolo was first developed in 2008 and joined Apache in 2011. The software project offers sorted and distributed key/value storage. Improving upon Google BigTable Design, Apache Accumo enables cell-based access control and server-side programming mechanism.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question188 = Question.create!(content: " It is heavily influence by Google BigTable Design.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question189 = Question.create!(content: " Among the most popular noSQL (Structured Query Language), it is number three.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question190 = Question.create!(content: " It was first developed in 2008.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question191 = Question.create!(content: " It joined Apache in 2011.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question192 = Question.create!(content: " It was created by the National Security Agency.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question193 = Question.create!(content: " It was an incubator project at Apache in September 2011.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question194 = Question.create!(content: " It became a top-level project at Apache in March 21, 2012.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question195 = Question.create!(content: " It enables cell-level security and column visibility, allowing viewers to see the keys and the values they are authorized.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question196 = Question.create!(content: " It enables server-side programming, via iterators", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question197 = Question.create!(content: " It is a computer software project.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question198 = Question.create!(content: " It was built on a foundation of Apache Hadoop, Apache ZooKeeper, and Apache Thrift.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question199 = Question.create!(content: " It is written in Java.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question200 = Question.create!(content: " A reference of Accumulo was made in the Draft 2012 Department of Defense (DoD) Authorization Bill by the U.S. Senate Armed Services Committee (SASC).", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question201 = Question.create!(content: " Apache Software Foundation is a non-profit corporation in the United States.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question202 = Question.create!(content: " It enables high performance data storage and retrieval.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question203 = Question.create!(content: " Google BigTable was published in 2006.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question204 = Question.create!(content: " It features sharding.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question205 = Question.create!(content: " It features constraints that are configurable.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question206 = Question.create!(content: " It features large rows.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question207 = Question.create!(content: " It is an open source project.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "PhoneGap")
if category == nil
  category = Category.create!(name: "PhoneGap")
end
question208 = Question.create!(content: "What is PhoneGap? ", answer: "PhoneGap is a program that allows programmers to make applications for mobile devices such as phones and tablets. It uses various languages which are present on both mobile platforms and traditional computers, meaning that the applications can be viewed on either platform. It currently is supported by every major operating system, including Apple iOS, Android, and much more.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question209 = Question.create!(content: " PhoneGap was originally created by the company Nitobi.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question210 = Question.create!(content: " Nitobi, along with PhoneGap, was purchased by Adobe Systems in 2011.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question211 = Question.create!(content: " PhoneGap uses JavaScript, HTML5, and CSS3 languages for the bulk of its programming.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question212 = Question.create!(content: " The applications PhoneGap creates are designated as hybrids, since they are not truly mobile apps or computer apps, but can be used on either.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question213 = Question.create!(content: " The underlying software of PhoneGap is Apache Cordova, an open-source software.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question214 = Question.create!(content: " The stable release of the newest version of PhoneGap, 4.2.0 was on January 10th, 2015.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question215 = Question.create!(content: " PhoneGap developer's app is available on any platform and can be created cross-platform.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question216 = Question.create!(content: " Using PhoneGap, a developer can package mobile apps in the could.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question217 = Question.create!(content: " Some popular apps created with PhoneGap are HealthTap, BrowserQuest, and Untappd.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question218 = Question.create!(content: " PhoneGap is completely free.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question219 = Question.create!(content: " Apps made by PhoneGap are fully compatible with the Apple app store, even though they typically do not accept third party tools.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question220 = Question.create!(content: " Adobe gave PhoneGap to the Apache Foundation in order to keep it free and open sourced.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question221 = Question.create!(content: " PhoneGap has a plugin based architecture, meaning all features are available as plugins.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question222 = Question.create!(content: " PhoneGap does not force a developer to choose one CSS library.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question223 = Question.create!(content: " In order to use and install PhoneGap, it requires NodeJS.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question224 = Question.create!(content: " PhoneGap is advantageous because there is no need to learn native mobile application development languages for each platform because it is multi-platform.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question225 = Question.create!(content: " PhoneGap has it's own homepage, phonegap.com, where a developer can download and install it, and explore apps created with PhoneGap.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question226 = Question.create!(content: " PhoneGap creates it's own directory of developers to allow open communication and inspiration.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Redis")
if category == nil
  category = Category.create!(name: "Redis")
end
question227 = Question.create!(content: "Redis, which is shorthand for Remote DIctionary Server, is a Pivotal Software sponsered data structure server. Most computer languages are binded to Redis, including Java and C++, among others. It is currently the most popular open-source, key value cache and store.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question228 = Question.create!(content: "There are at least 36 computer languages binded to it", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question229 = Question.create!(content: "It is a reliable Publish and Subscribe messaging system", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question230 = Question.create!(content: "Grouping commands together as a single transaction is possible", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question231 = Question.create!(content: "The keys are binary safe", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question232 = Question.create!(content: "Extremely long keys do not work well with Redis", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question233 = Question.create!(content: "String type is the simplest type of value with a key", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question234 = Question.create!(content: "The whole dataset is held in memory", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question235 = Question.create!(content: "It supports master-slave replication", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question236 = Question.create!(content: "It is currently in the beta stage of cluster specification", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question237 = Question.create!(content: "Redis is open source software", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question238 = Question.create!(content: "Amazon Web Services commonly uses Redis", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question239 = Question.create!(content: "Replication is non-blocking on the master side", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question240 = Question.create!(content: "More closely related to fundamental data structures than other key value databases", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question241 = Question.create!(content: "Redis is single-threaded", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question242 = Question.create!(content: "Has been tested to handle at least 250 million keys per instance", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question243 = Question.create!(content: "Originally started to scale LLOOGG", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question244 = Question.create!(content: "Started over 6 years ago", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question245 = Question.create!(content: "It can automatically evict old data when used as a cache", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question246 = Question.create!(content: "Maximum key size allowed is 512KB", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question247 = Question.create!(content: "very fast Disk-backed in-memory database", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question248 = Question.create!(content: "master-slave replication, automatic failover", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question249 = Question.create!(content: "Supports various data structures: sets, lists, hashes, sorted sets, or just simple values", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question250 = Question.create!(content: "Best for: rapidly changing data whose foreseeable database size should mostly fit in memory", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Neo4J:")
if category == nil
  category = Category.create!(name: "Neo4J:")
end
question251 = Question.create!(content: "What is Neo4J? ", answer: "A graph database for connected data, like social networks or road networks.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question252 = Question.create!(content: "Does Neo4J support ACID conformity?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question253 = Question.create!(content: "Useful for: searching routes in social graphs, public transportation, road maps, networks, etc.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question254 = Question.create!(content: "What language is it oriented towards? ", answer: "Java based, supports groovy.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question255 = Question.create!(content: "Cypher pattern-matching based query language can be used", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question256 = Question.create!(content: "What is Gremlin? The graph search language for Neo4J.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Node.js / Express.js")
if category == nil
  category = Category.create!(name: "Node.js / Express.js")
end
question257 = Question.create!(content: "Node.js is an open source runtime environment. Node.js can be used for server-side and networking applications. Some current uses include designing and implementing frameworks such as Meteor and Yahoo! Mojito. It is also used by PayPal, GoDaddy, and Groupon.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question258 = Question.create!(content: "Node.js was first published for Linux use but now operates on OS X, Linux, Solaris, FreeBSD, OpenBSD and Microsoft.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question259 = Question.create!(content: "Node is written in C, C++ and Javascript.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question260 = Question.create!(content: "Node.js uses event-driven architecture.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question261 = Question.create!(content: "Node's built-in library allows applications to act as servers without external software.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question262 = Question.create!(content: "Frameworks such as Express.js and Connect can be used to accelerate the development of applications.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question263 = Question.create!(content: "Node is similar to PHP or Python, but is a non-blocking rather than a blocking language.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question264 = Question.create!(content: "Node is built on the Google v8 Javascript engine.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question265 = Question.create!(content: "Node is open-source and has a developer community that meets annually at NodeConf.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question266 = Question.create!(content: "Node is the first platform that allows web applications with real-time, two-way connections.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question267 = Question.create!(content: "Node is best used to build fast, scalable network applications.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question268 = Question.create!(content: "Node.js operates on a single thread. That way, it supports thousands of concurrent connections.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question269 = Question.create!(content: "Node.js can handle scalability levels of over 1,000,000 concurrent connections.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question270 = Question.create!(content: "NPM Tool is a default tool for package management support.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question271 = Question.create!(content: "Node.js can be used to process files while they're being uploaded, for applications such as real-time video and audio encoding.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question272 = Question.create!(content: "Node is used by Hummingbird to track website visitors and visualize interactions in real time.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question273 = Question.create!(content: "Node should not be used for heavy sever-side computation.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question274 = Question.create!(content: "Express.js is a Node.js web app framework for building SPAs (single page applications).", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question275 = Question.create!(content: "high throughput server-side platform for (typically) web applications", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question276 = Question.create!(content: "non-blocking I/O for high throughput", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question277 = Question.create!(content: "Uses Google V8 JavaScript engine", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question278 = Question.create!(content: "Built-in library for serving web content, without the need for HTTP servers like Apache or IIS", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question279 = Question.create!(content: "Event-driven architecture", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question280 = Question.create!(content: "npm = node package manager", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question281 = Question.create!(content: "single-threaded event loop", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question282 = Question.create!(content: "Common use is for real-time web applications", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question283 = Question.create!(content: "run an application like: \"node <app name>.js\"", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question284 = Question.create!(content: "registers itself with OS to be notified when a connection is made", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question285 = Question.create!(content: "Does NOT spawn processes or threads for each connection, just the event loop", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question286 = Question.create!(content: " Because Google V8 compiles JavaScript into native machine code, Node.js is incredibly fast.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question287 = Question.create!(content: " Node is sponsored by Joyent, so it has company backing of the project's future.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question288 = Question.create!(content: " The Node community is very active, worth over 91,000 modules on npm.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Hibernate / JPA")
if category == nil
  category = Category.create!(name: "Hibernate / JPA")
end
question289 = Question.create!(content: "What represents the application session with the DB? ", answer: "EntityManager.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question290 = Question.create!(content: "Also represents the transaction context. New EntityManager is created with each transaction in stateless model", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question291 = Question.create!(content: "EntityManager persistence operations: persist (INSERT), merge (UPDATE), remove (DELETE), find (SELECT)", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question292 = Question.create!(content: "Two main states of an object from JPA's perspective: managed, detached", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question293 = Question.create!(content: "On a rollback, all managed objects are detached", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question294 = Question.create!(content: "Persistence context tracks changes to managed objects and maintain object identity", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question295 = Question.create!(content: "Detached objects are not managed in current persistence context", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question296 = Question.create!(content: "Managed objects should only reference other managed objects; same for detached.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question297 = Question.create!(content: "Objects are inserted when persistence context is flushed or transaction is committed", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question298 = Question.create!(content: "Persist will assign id to an object with a generated id", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question299 = Question.create!(content: "IDENTITY sequencing - DB assigns ID on commit or flush", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question300 = Question.create!(content: "Persist should only be called on new objects", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question301 = Question.create!(content: "Persist can only be called on Entity objects, not embedded (done automatically) or collections", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question302 = Question.create!(content: "Cascading persist can happen depending on relationships marked as such", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question303 = Question.create!(content: "Normally merge is not required: just update fields with set methods, then commit transaction", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question304 = Question.create!(content: "EntityManager figures out what has been changed and updates DB", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question305 = Question.create!(content: "Merge is useful when using a detached object persisted by another EntityManager", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question306 = Question.create!(content: "Can only be called within a transaction (merge)", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question307 = Question.create!(content: "JPA 2.0: criteria query API, support for collections of embedded objects, ordered lists", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question308 = Question.create!(content: "JPA 2.1: (2011): converters allowing custom conversion between DB and object types,", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question309 = Question.create!(content: "allow bulk update/deletes, stored procedure calling, schema generation, entity graph partial fetching, JPQL enhancements - generic database functions, join ON, arithmetic sub-queries", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question310 = Question.create!(content: "EntityManager.remove can only be called on Entity objects", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question311 = Question.create!(content: "EntityManager.getReference may return a proxy to an object as oppposed to loading its", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question312 = Question.create!(content: "EntityManager.refresh refreshes an object from the DB, with cascades too if applicable", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question313 = Question.create!(content: "EntityManager.flush writes all changes to the DB before transaction is committed.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question314 = Question.create!(content: "EntityManager.clear clears persistence context. Any object read is now detached from that manager.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question315 = Question.create!(content: "Hibernate: can manage one-to-many, many-to-many, and reflexive associations (one-to-many with its own type)", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question316 = Question.create!(content: "Supports mapping of custom value types (can override default SQL type when mapping to a column)", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question317 = Question.create!(content: "HQL - object-oriented criteria queries", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question318 = Question.create!(content: "Works on POJOs", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question319 = Question.create!(content: "Can be configured to lazy load collections", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question320 = Question.create!(content: "Can be configured to cascade operations", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question321 = Question.create!(content: "Has a dirty checking feature to avoid unncessary writes", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question322 = Question.create!(content: "Entity vs. subordinate components (kind of like Embeddable)", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question323 = Question.create!(content: "Hibernate 3.0 was in 2005, used annotations, user defined filters", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question324 = Question.create!(content: "org.hibernate.SessionFactory, Session - represents a hibernate session", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question325 = Question.create!(content: "sessions are not expected to be thread safe nor used by multiple clients", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question326 = Question.create!(content: "Hibernate OGM (Object/Grid Mapper) - extension to store data in a NoSQL store", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question327 = Question.create!(content: "supports Shards - horizontal partitioning for multiple RDBMS", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question328 = Question.create!(content: "Hibernate Search - integrates Lucene", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question329 = Question.create!(content: "NHibernate - the .NET framework version", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Spring Core / MVC")
if category == nil
  category = Category.create!(name: "Spring Core / MVC")
end
question330 = Question.create!(content: "What is Dependency Injection?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question331 = Question.create!(content: "What is Inversion of Control?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question332 = Question.create!(content: "What are some common XML Configuration files in Spring?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question333 = Question.create!(content: "What are some of the available Spring libraries?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question334 = Question.create!(content: "What is the open session in view pattern?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question335 = Question.create!(content: "How would you use Spring for transaction management?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question336 = Question.create!(content: "What is Aspect Oriented Programming?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question337 = Question.create!(content: "What are some annotations relevant to Spring?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question338 = Question.create!(content: "How would you set up a controller in Spring MVC?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question339 = Question.create!(content: "How would you set up a view?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "ElasticSearch")
if category == nil
  category = Category.create!(name: "ElasticSearch")
end
question340 = Question.create!(content: "What is the main point of ElasticSearch? ", answer: "Supporting advanced search on flexible complex fields.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question341 = Question.create!(content: "JSON over HTTP", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question342 = Question.create!(content: "Sorting by score", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question343 = Question.create!(content: "Sorting by geo-distance", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question344 = Question.create!(content: "Fuzzy searches", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question345 = Question.create!(content: "Async replication", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question346 = Question.create!(content: "parent + child documents", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question347 = Question.create!(content: "Very sophisticated querying", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Zend Framework")
if category == nil
  category = Category.create!(name: "Zend Framework")
end
category = Category.find_by(name: "jQuery")
if category == nil
  category = Category.create!(name: "jQuery")
end
question348 = Question.create!(content: "What is the $ function?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question349 = Question.create!(content: "How to hide / show an element with jQuery?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question350 = Question.create!(content: "What are some jQuery effects?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question351 = Question.create!(content: "How would you get a form field value in jQuery?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Objective C")
if category == nil
  category = Category.create!(name: "Objective C")
end
category = Category.find_by(name: "XML and related topics (XSLT)")
if category == nil
  category = Category.create!(name: "XML and related topics (XSLT)")
end
question352 = Question.create!(content: "What is XSLT?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question353 = Question.create!(content: "How might you map an array to XML?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question354 = Question.create!(content: "How might you map a hash to XML?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question355 = Question.create!(content: "What are the disadvantages to XML over other data formats such as JSON?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Web services (RESTful vs. SOAP)")
if category == nil
  category = Category.create!(name: "Web services (RESTful vs. SOAP)")
end
question356 = Question.create!(content: "RESTful web services are any systems based on REST, which stands for Representational State Transfer. REST is an architectural style for networked hypermedia applications. RESTful services are generally lightweight, maintainable and scalable. RESTful systems communicate in HTTP, in order to capture the characteristics of the web that make it successful.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question357 = Question.create!(content: " REST relies on a stateless cacheable communications protocol, usually HTTP.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question358 = Question.create!(content: " REST eliminates the need to learn CORBA, RPC or SOAP, or other complicated languages, to communicate between machines.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question359 = Question.create!(content: " RESTful services are platform-independent, meaning they can communicate on or across any machine.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question360 = Question.create!(content: " RESTful services use no cookies; RESTful operations are self-contained and carry all information that the server needs in order to complete an operation.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question361 = Question.create!(content: " RESTful design uses nouns rather than verbs to denote resources, such as 'userdirectory' in a URL vs 'getuserdirectory.'", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question362 = Question.create!(content: " REST has no built-in security but can be carried over secure sockets.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question363 = Question.create!(content: " REST can handle simple requests or requests with more than one parameter.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question364 = Question.create!(content: " REST is now the default for web and mobile apps.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question365 = Question.create!(content: " REST provides access to resources, such as pictures, video files, business information, etc. through HTTP language. A RESTful service provides a window through which users can access these resources.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question366 = Question.create!(content: " RESTful services rely on representations of resources which are capable of linking to related resources.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question367 = Question.create!(content: " In RESTful services, client and server communicate via messages. The client sends a request to the server, and the server answers.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question368 = Question.create!(content: " Messages include a request and a resource.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question369 = Question.create!(content: " To use REST, each resource must have at least one URI, which identifies a resource or collection of resource.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question370 = Question.create!(content: " A request in a RESTful service is independent; it cannot rely on a past request.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question371 = Question.create!(content: " To rely on past requests, users can use caching, in a server, client or a proxy server.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question372 = Question.create!(content: " RESTful services can be implemented through Python, .NET, or Java.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question373 = Question.create!(content: " The entire World Wide Web is an implementation of a system built on the REST architectural style.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question374 = Question.create!(content: " Each message sent through a RESTful service contains enough information to describe how to process the message.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question375 = Question.create!(content: " Layered components are characteristic of RESTful services; proxy servers, gateways, etc. can support performance and security.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question376 = Question.create!(content: " RESTful web services use a fixed set of four operations: PUT, GET, POST, and DELETE.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Facebook Graph API")
if category == nil
  category = Category.create!(name: "Facebook Graph API")
end
category = Category.find_by(name: "Apache / Tomcat")
if category == nil
  category = Category.create!(name: "Apache / Tomcat")
end
question377 = Question.create!(content: "Where would you look for server logs in Tomcat?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question378 = Question.create!(content: "How are web applications deployed in Tomcat?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question379 = Question.create!(content: "What is a .war file?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question380 = Question.create!(content: "How can Apache and Tomcat interact?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question381 = Question.create!(content: "What is a servlet container?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Hadoop")
if category == nil
  category = Category.create!(name: "Hadoop")
end
question382 = Question.create!(content: "Hadoop is a project by Apache that develops open-source software for scalable, distributed computing. The Hadoop software library is a framework that allows the processing of large data sets to be distributed among simple programming models. Facebook currently runs the largest Hadoop cluster, which grows by half a PB per day. Yahoo also uses Hadoop for its Search Webmap. Hadoop accomplishes massive data storage with quick processing.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question383 = Question.create!(content: " Hadoop is open-source and free, meaning that anyone can manipulate the program to suit their needs.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question384 = Question.create!(content: " Hadoop does not require the user to preprocess data before storing it.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question385 = Question.create!(content: " If a node goes down, jobs are redirected to other nodes to make sure the distributed computing cannot fail.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question386 = Question.create!(content: " Hadoop employs Java-based HDFS distributed file system to store data.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question387 = Question.create!(content: " Flume, another component, continuously loads data from logs into Hadoop.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question388 = Question.create!(content: " The original goal of Hadoop was to search millions or billions of webpages and return relevant results.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question389 = Question.create!(content: " Hadoop is also used to store large amounts of data without the constraints of the SQL-based world.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question390 = Question.create!(content: " Hadoop is an expanding ecosystem, not a single product.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question391 = Question.create!(content: " Users can layer Hadoop over HDFS with an SQL-based product for database functionality.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question392 = Question.create!(content: " Hadoop enables more than just web analytics; data from sensory devices or risk analysis can be managed by Hadoop.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question393 = Question.create!(content: " Hadoop can handle any type of data regardless of native format.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question394 = Question.create!(content: " Through Hadoop, all data can be stored and online for real-time interactive querying.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question395 = Question.create!(content: " Hadoop's flexible structure allows data from multiple sources to be aggregated, allowing deeper analysis than any one program.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question396 = Question.create!(content: " New servers and resources can be added without having to move, reformat or changer the dependent analytic applications or workflows.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question397 = Question.create!(content: " Hadoop is composed of four core components: Hadoop Common, MapReduce, Hadoop Distributed File System (HDFS), and YARN.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question398 = Question.create!(content: " Yarn (Yet Another Resource Negotiator) assigns CPU, memory and storage to applications running on a Hadoop cluster.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question399 = Question.create!(content: " HDFS links together file systems on local nodes to create a single file system.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question400 = Question.create!(content: " Hadoop common is the module that contains utilities to support other Hadoop components, including user-created components.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question401 = Question.create!(content: " Hadoop was born out of MapReduce, a new style of data processing created by Google to handle an enormous influx of Big Data.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question402 = Question.create!(content: " Hadoop is incredibly cost-effective, storing data for hundreds of dollars per terabyte rather than thousands to tens of thousands.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Maven")
if category == nil
  category = Category.create!(name: "Maven")
end
question403 = Question.create!(content: "How would you compare Maven to Ant?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question404 = Question.create!(content: "What is the maven central repository?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question405 = Question.create!(content: "How would you characterize the maven approach?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Big Data")
if category == nil
  category = Category.create!(name: "Big Data")
end
question406 = Question.create!(content: "It's as much about bad data as it is about big data - unstructured, dirty, as opposed to what goes into relational database", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question407 = Question.create!(content: "How much data qualifies as big data? ", answer: "Often it's considered to be 10 TB+ as the start of real 'big data' in terms of size, going up into the PBs.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question408 = Question.create!(content: "\"Big Data\" refers to massive quantities of data, both structured and unstructured, that companies can't effectively process using standard methods. Usually this kind of data changes frequently and consists of millions of figures, making up huge quantities, such as Petabytes or Exabytes. It can also refer to the methods used for collecting this kind of information, or the technology itself.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question409 = Question.create!(content: "Big Data can refer both to the actual data set, based on it's size, or the process and technology of managing the data.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question410 = Question.create!(content: "When there is too much data to be processed using traditional methods, it is generally considered \"Big Data\".", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question411 = Question.create!(content: "The definition of \"big\" is always changing- over the years, Big Data will continue to increase in size.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question412 = Question.create!(content: "When trying to decide if a data set qualifies as Big Data, one must consider the size of the data set, the speed at which it is generated, and the variety of data.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question413 = Question.create!(content: "Big Data has a multitude of uses for companies, and can be a handy tool for improving operations.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question414 = Question.create!(content: "There are six important factors to consider when categorizing Big Data- Volume, Variety, Velocity, Variability, Veracity, and Complexity.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question415 = Question.create!(content: "Volume refers to the actual amount of data that has to be collected and managed. Large volume includes things like a customer database with details on millions of people.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question416 = Question.create!(content: "Variety is the kind of data being collected. Some examples include names, such as a census, or numbers, such as sales figures.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question417 = Question.create!(content: "Velocity refers to how quickly the information changes, or how quickly it's generated and can be processed. High velocity figures would include the number of customers served at a chain restaurant, or information about births and deaths in the world.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question418 = Question.create!(content: "Variability is how consistent the data tends to be. Inconsistencies can make processing the data more complicated.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question419 = Question.create!(content: "Veracity refers to how reliable the data tends to be. For example, data that is gathered from secondary or tertiary sources may be less reliable than data collected from a company itself.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question420 = Question.create!(content: "Complexity refers to how many different areas a data set covers. More complex data is more difficult to manage effectively.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question421 = Question.create!(content: "Data sets that qualify as Big Data can be difficult for companies to manage effectively.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question422 = Question.create!(content: "Specialized methods are typically needed for companies to gather, analyze, and manage big data.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question423 = Question.create!(content: "Some methods of managing Big Data include outsourcing to other companies, or even Crowd Sourcing to thousands of individual workers.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question424 = Question.create!(content: "Recently, people have began to develop computer programs to handle Big Data. This process is called Machine Learning.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question425 = Question.create!(content: "Big Data has been a focus of the Obama administration, including Big Data Research and Development Initiative, which explores the usefulness of Big Data in the government.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Software Architecture")
if category == nil
  category = Category.create!(name: "Software Architecture")
end
question426 = Question.create!(content: "Vertical scaling (adding resources to a machine, splitting up by services)", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question427 = Question.create!(content: "Horizontal scaling (nodes are the same, duplicated, load balanced)", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question428 = Question.create!(content: "Caching", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question429 = Question.create!(content: "Downtime / fault-tolerance", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question430 = Question.create!(content: "Security", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question431 = Question.create!(content: "What would be your approach when upgrading a consumer facing web application that can't be down for any significant period of time ever?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Adobe Flex")
if category == nil
  category = Category.create!(name: "Adobe Flex")
end
question432 = Question.create!(content: "What is a repeater, and are there any problems using this functionality in Flex?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question433 = Question.create!(content: "What is 2-way data binding?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question434 = Question.create!(content: "How would you configure events in Flex?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question435 = Question.create!(content: "How would you characterize the typing system in Flex?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question436 = Question.create!(content: "Basic declarations / syntax", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "JEE / J2EE")
if category == nil
  category = Category.create!(name: "JEE / J2EE")
end
question437 = Question.create!(content: "What are the main components of JEE / J2EE?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question438 = Question.create!(content: "What's the latest version and what are some new features of it?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "AWS")
if category == nil
  category = Category.create!(name: "AWS")
end
question439 = Question.create!(content: "What are some of the services under the AWS umbrella?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question440 = Question.create!(content: "What is EC2?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question441 = Question.create!(content: "What is S3?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question442 = Question.create!(content: "What is Route 53?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question443 = Question.create!(content: "What is Elastic Beanstalk?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question444 = Question.create!(content: "What are some limitations of S3?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question445 = Question.create!(content: "How does the pricing model work for some AWS services like EC2 or S3?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question446 = Question.create!(content: "What is Amazon CloudFront?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question447 = Question.create!(content: "What are some alternative cloud platforms to AWS?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Bootstrap")
if category == nil
  category = Category.create!(name: "Bootstrap")
end
question448 = Question.create!(content: "Responsive design is?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question449 = Question.create!(content: "How do the columns work?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question450 = Question.create!(content: "Color configuration?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question451 = Question.create!(content: "What are some changes in version 3?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question452 = Question.create!(content: "What are some key Bootstrap features?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question453 = Question.create!(content: "What are some additional Boostrap related tools / resources? ", answer: "Bootply, Wrapbootstrap.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "NoSQL")
if category == nil
  category = Category.create!(name: "NoSQL")
end
question454 = Question.create!(content: "What are some key differences between NoSQL and relational databases?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question455 = Question.create!(content: "What are some prominent NoSQL products?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question456 = Question.create!(content: "What are some limitations of NoSQL DBs?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question457 = Question.create!(content: "What are the main categories of NoSQL DBs?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question458 = Question.create!(content: "How would you decide to use a NoSQL DB vs a traditional relational database?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Less / SCSS")
if category == nil
  category = Category.create!(name: "Less / SCSS")
end
question459 = Question.create!(content: "What's the difference between LESS and SCSS?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question460 = Question.create!(content: "What are some advantages of SCSS over CSS?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Data Structures")
if category == nil
  category = Category.create!(name: "Data Structures")
end
question461 = Question.create!(content: "When would you use a map vs array?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question462 = Question.create!(content: "How is a hash map implemented?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question463 = Question.create!(content: "When would you use a set vs. a list?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question464 = Question.create!(content: "What is an expandable array, and how do you suppose it is implemented?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question465 = Question.create!(content: "What are some tree data structure types?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question466 = Question.create!(content: "When would you use a trie?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question467 = Question.create!(content: "What is a linked list useful for?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question468 = Question.create!(content: "What is a red-black tree useful for?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question469 = Question.create!(content: "What might a Merkle tree / hash tree be useful for?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Nginx")
if category == nil
  category = Category.create!(name: "Nginx")
end
question470 = Question.create!(content: "What is Nginx? ", answer: "Reverse proxy server for various web protocols (HTTP, HTTPS, SMTP, etc.).", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question471 = Question.create!(content: "What is the main point of Nginx? ", answer: "Focus on high concurrency, low memory usage.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question472 = Question.create!(content: "Can handle 10K simultaneous connections with low memory footprint", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question473 = Question.create!(content: "Explain how Nginx load balancing works.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question474 = Question.create!(content: "What kind of fault tolerance support does Nginx give you?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question475 = Question.create!(content: "What are some common web server features of Nginx? ", answer: "SPDY protocol support, WebSockets support, gzip compression, URL rewriting, SSI (server side includes).", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question476 = Question.create!(content: "How does Nginx support XSLT?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question477 = Question.create!(content: "What is IP based geolocation, and how does Nginx support it?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question478 = Question.create!(content: "What is bandwidth throttling and how does Nginx support it?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Shell Scripting")
if category == nil
  category = Category.create!(name: "Shell Scripting")
end
question479 = Question.create!(content: "What are some different Unix shell types?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question480 = Question.create!(content: "How would you set an environment variable in bash?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question481 = Question.create!(content: "How can you show all environment variable settings in bash?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question482 = Question.create!(content: "How would you write a loop in bash?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question483 = Question.create!(content: "How would you manipulate a file path variable in bash (e.g. remove extension, remove all but file name)?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question484 = Question.create!(content: "How would you access script arguments?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question485 = Question.create!(content: "Input/Output/Error streams", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question486 = Question.create!(content: "What is awk?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Unix")
if category == nil
  category = Category.create!(name: "Unix")
end
category = Category.find_by(name: "Windows")
if category == nil
  category = Category.create!(name: "Windows")
end
question487 = Question.create!(content: "Windows 7 vs Windows 8 differences", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question488 = Question.create!(content: "New features in Windows 7", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question489 = Question.create!(content: "Administration", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question490 = Question.create!(content: "Security", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question491 = Question.create!(content: "Performance tuning", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question492 = Question.create!(content: "Networking", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question493 = Question.create!(content: "Navigating the file system", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question494 = Question.create!(content: "Searching for things", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question495 = Question.create!(content: "How can you configure a service in Windows?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question496 = Question.create!(content: "How would you set an environment variable in Windows?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question497 = Question.create!(content: "What are some common utility programs in Windows?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question498 = Question.create!(content: "What are some recent Windows versions and what's different about them?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "OS X")
if category == nil
  category = Category.create!(name: "OS X")
end
question499 = Question.create!(content: "What are recent versions of OS X and what's different about them?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question500 = Question.create!(content: "What are some new features in OS X?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question501 = Question.create!(content: "How would you create a screenshot in OS X?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question502 = Question.create!(content: "What are some basic utilities in OS X?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Mobile Development: iOS")
if category == nil
  category = Category.create!(name: "Mobile Development: iOS")
end
category = Category.find_by(name: "Android")
if category == nil
  category = Category.create!(name: "Android")
end
category = Category.find_by(name: "Struts 2")
if category == nil
  category = Category.create!(name: "Struts 2")
end
question503 = Question.create!(content: "How does Struts 2 differ from Struts?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Browser Differences / Quirks")
if category == nil
  category = Category.create!(name: "Browser Differences / Quirks")
end
question504 = Question.create!(content: "What are some differences between recent versions of IE and Chrome?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Development tools and VCS")
if category == nil
  category = Category.create!(name: "Development tools and VCS")
end
question505 = Question.create!(content: "Eclipse", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question506 = Question.create!(content: "IntelliJ", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question507 = Question.create!(content: "NetBeans", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question508 = Question.create!(content: "maven", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question509 = Question.create!(content: "SVN", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Oracle")
if category == nil
  category = Category.create!(name: "Oracle")
end
question510 = Question.create!(content: "What is the default sample schema?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question511 = Question.create!(content: "What are some other default schemas?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question512 = Question.create!(content: "What is the SGA?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question513 = Question.create!(content: "What are MNON and PMON?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question514 = Question.create!(content: "What's a common utility from Oracle to load data into the DB?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "SQL Server")
if category == nil
  category = Category.create!(name: "SQL Server")
end
question515 = Question.create!(content: "What kind of concurrency control is supported by SQL Server? ", answer: "Pessimistic and optimistic.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "MySQL")
if category == nil
  category = Category.create!(name: "MySQL")
end
category = Category.find_by(name: "C++")
if category == nil
  category = Category.create!(name: "C++")
end
question516 = Question.create!(content: "Difference between references and pointers are?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question517 = Question.create!(content: "Reference to a pointer means?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question518 = Question.create!(content: "What is the STL?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question519 = Question.create!(content: "How does memory management work in C++?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question520 = Question.create!(content: "C++ has a virtual destructor. Why no virtual constructor?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question521 = Question.create!(content: "What's a virtual function?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "PHP")
if category == nil
  category = Category.create!(name: "PHP")
end
question522 = Question.create!(content: "What does a PHP 'Hello World' look like?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "C")
if category == nil
  category = Category.create!(name: "C")
end
question523 = Question.create!(content: "How do you manage memory in C?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question524 = Question.create!(content: "What the entry point to a C program?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question525 = Question.create!(content: "How are strings represented in C?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Scala")
if category == nil
  category = Category.create!(name: "Scala")
end
category = Category.find_by(name: "Mahout")
if category == nil
  category = Category.create!(name: "Mahout")
end
question526 = Question.create!(content: "What is Mahout? ", answer: "Apache Mahout is a scalable machine learning library. Mahout has several goals. One such goal is recommendation mining, taking users' behavior and finding items that users might like. Mahout also seeks to cluster, or take text groups and sort them into groups of related documents. Mahout also classifies, or learns from existing documents what the characteristics of the group are, and then assign unlabeled documents to the correct category.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question527 = Question.create!(content: " Mahout produces free implementations of the clustering, classification and recommendation mining software.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question528 = Question.create!(content: " Mahout uses the existing Apache Hadoop platform.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question529 = Question.create!(content: " Mahout is scalable; that is, it can handle a growing amount of work by enlarging itself.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question530 = Question.create!(content: " Mahout uses machine learning algorithms also used by Netflix and Amazon to recommend similar products.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question531 = Question.create!(content: " Mahout uses both supervised and unsupervised learning.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question532 = Question.create!(content: " Supervised learning is learning a function from data labeled by the user; for example, through supervised learning of a user marking an email as spam, Mahout can learn to identify spam.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question533 = Question.create!(content: " Unsupervised learning makes sense of data without any input as to what is correct. It is used to cluster similar inputs into groups.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question534 = Question.create!(content: " Mahout is a community that was started by people involved in the Apache Lucene community, an open source search.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question535 = Question.create!(content: " An existing feature of Mahout is Taste CF, started by Sean Owen on SourceForge.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question536 = Question.create!(content: " A Mahout is a person who drives an elephant; the name comes from the yellow elephant logo of Apache Hadoop.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question537 = Question.create!(content: " Clustering with Mahout supports several clustering algorithms, including Canopy, k-means and fuzzy k-means, mean-shift, and dirichlet.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question538 = Question.create!(content: " To cluster data with Mahout, the user converts text into a numeric representation, runs the clustering algorithm using one of Mahout's driver programs, evaluates the results, and iterates if necessary.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question539 = Question.create!(content: " For categorizing, Mahout supports both a simple Map-Reduce-enabled Naive Bayes classifier and a second approach called Complementary Naive Bayes.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question540 = Question.create!(content: " The Mahout project next seeks to create Map-Reduce implementations of random decision forests for classification and more categorization options.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question541 = Question.create!(content: " Mahout provides sparse and dense implementations of matrix and vector tools.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question542 = Question.create!(content: " According to cofounder Ingersoll, Mahout is a natural fit for the cloud.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question543 = Question.create!(content: " The code is open source, so the next step is uncertain.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question544 = Question.create!(content: " Mahout uses a Parallel Matrix Factorization algorithm to predict which items a user might prefer from items she has not yet seen.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question545 = Question.create!(content: " Mahout uses Minhash Clustering algorithms to estimate similarity between data sets.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "JBoss")
if category == nil
  category = Category.create!(name: "JBoss")
end
question546 = Question.create!(content: "What is JBoss? ", answer: "JBoss now called WildFly is a Java Application Server which is open sourced. Started in 1999, JBoss was origonally authored by JBoss but is now open and developed by RedHat. This software can be used for many different things within the Java Enterprise Edition framework and also runs on many different types of Java Virtual Machine (JVM). This is an alternative software to multiple Java Application Server platforms developed by Oracle who hold the Java patents.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question547 = Question.create!(content: " This software can be used for clustering which is connecting more than one computer over a network to communicate or perform tasks.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question548 = Question.create!(content: " WildFly can perform cache distrubution which will allow for faster requests once a cache is stored for later access.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question549 = Question.create!(content: " The program allows for JavaBeans which is a system for creating GUI's for Java programs.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question550 = Question.create!(content: " WildFly can be used for switching processes to another computer in the situation of a system failure or other ordinance.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question551 = Question.create!(content: " Java Hibernate functions can be used to map from Java Classes to data sets and vice versa.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question552 = Question.create!(content: " WildFly can perform Java Authentication which is sometimes referred to as Jazz.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question553 = Question.create!(content: " WildFly can be run on multiple operating systems.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question554 = Question.create!(content: " JBoss can be used to deploy only the classes that you need for very fast deployment.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question555 = Question.create!(content: " Newer versions of JBoss get rid of .Jar dependencies so it is cleaner and easier to use.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question556 = Question.create!(content: " JBoss is very lightweight taking minimum memory usage.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question557 = Question.create!(content: " Application portability is a big deal with JBoss.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question558 = Question.create!(content: " JBoss has the ability to edit static resources without redeployment.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question559 = Question.create!(content: " There is modular design for breaking down problems and faster turn-around of broken code.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question560 = Question.create!(content: " JBoss has Arquillian tests for being able to make perfect applications by using extensive testing.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question561 = Question.create!(content: " JBoss supports Java Mail.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question562 = Question.create!(content: " JBoss has support for Load Balancing for being able to distribute workloads.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question563 = Question.create!(content: " The latest version of JBoss was certified for Java EE full profile.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question564 = Question.create!(content: " JBoss allows for deployment of apis.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question565 = Question.create!(content: " Licensing is available for 16 and 64 cores.", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Testing Tools & Methodologies")
if category == nil
  category = Category.create!(name: "Testing Tools & Methodologies")
end
question566 = Question.create!(content: "What is TDD? ", answer: "Test Driven Development.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question567 = Question.create!(content: "What's the difference between Unit Tests and Integration Tests?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question568 = Question.create!(content: "What are regression tests?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question569 = Question.create!(content: "What are Sanity / Smoke Tests?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question570 = Question.create!(content: "What are Mockito, JUnit?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
category = Category.find_by(name: "Security Issues")
if category == nil
  category = Category.create!(name: "Security Issues")
end
question571 = Question.create!(content: "What are brute force attacks?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question572 = Question.create!(content: "What is Cross site scripting (XSS)?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question573 = Question.create!(content: "What is SQL Injection?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question574 = Question.create!(content: "What is the point of salting passwords?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question575 = Question.create!(content: "What is 2 Factor authentication?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question576 = Question.create!(content: "Plaintext password files", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question577 = Question.create!(content: "What is a secure hash?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question578 = Question.create!(content: "What is RSA?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question579 = Question.create!(content: "What is public key encryption?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
question580 = Question.create!(content: "What is Phishing?", answer: "TODO.", user_id: 1, difficulty_id: 2, question_type_id: 1, category_id: category.id)
